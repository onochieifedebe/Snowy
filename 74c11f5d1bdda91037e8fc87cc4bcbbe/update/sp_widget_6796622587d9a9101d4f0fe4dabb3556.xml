<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function ESRIMapController ($timeout, $rootScope, $scope, $http, $sce) {
	var c = this;
	var apiKey = c.data.apiKey;
	var basemapEnum = "ArcGIS:Navigation";
	
	c.data.cat_item = $scope.page.g_form.getValue("sc_cat_item");
	
	// This is the center of the map 
	var myTownCenterLat = 36.778259; 
	var myTownCenterLong = -119.417931;	
	
	// Inital map setup																																							
	var map = L.map("map", {
		minZoom: 2
	}).setView([myTownCenterLat, myTownCenterLong], 10);

	// Sets up the vector so we can click on it																					
	L.esri.Vector.vectorBasemapLayer(basemapEnum, {
		apiKey: apiKey
	}).addTo(map);

	// This is the geo coder that can turn the clicks into an address																							
	var geocoder = L.esri.Geocoding.geocodeService({
		apikey: apiKey
	});

	
	var layerGroup = L.layerGroup().addTo(map);
	
	// Sets up what happens when we click on the map																					
	map.on("click", function(e) {
		geocoder.reverse().latlng(e.latlng).run(function(error, result) {
			if (error) {
				return;
			}
			
			setVariables(result.latlng.lat, result.latlng.lng, result.address.LongLabel);
			
			layerGroup.clearLayers();
			results.clearLayers();
			marker = L.marker(result.latlng)
				.addTo(layerGroup)
				.bindPopup(result.address.LongLabel)
				.openPopup();
		});
	});
	
	// Sets up the search control
	var searchControl = L.esri.Geocoding.geosearch({
		position: "topright",
		placeholder: "Enter an address or place e.g. 1 York St",
		useMapBounds: false,
		providers: [L.esri.Geocoding.arcgisOnlineProvider({
			apikey: apiKey,
			nearby: {
				lat: myTownCenterLat,
				lng: myTownCenterLong
			},
		})]
	}).addTo(map);
	// This executes when you select a search result
	var results = L.layerGroup().addTo(map);
	searchControl.on('results', function(data) {
		layerGroup.clearLayers();
		for (var i = data.results.length - 1; i >= 0; i--) {
			L.marker(data.results[i].latlng)
				.addTo(results)
				.bindPopup(data.results[i].text)
				.openPopup();
			
			setVariables(data.results[i].latlng.lat, data.results[i].latlng.lng, data.results[i].text);
		}
	});
	
	map.locate({setView: true, watch: true}) /* This will return map so you can do chaining */
        .on('locationfound', function(e){
			latLong = L.latLng(e.latitude, e.longitude);
			geocoder.reverse().latlng(latLong).run(function(error, result) {
				if (error) {
					alert("error found");
					return;
				}
				//$scope.page.g_form.setValue("location", result.address.LongLabel);
				result.address.LongLabel;
				layerGroup.clearLayers();
				results.clearLayers();
				var marker = L.marker([e.latitude, e.longitude]).addTo(results).bindPopup("Your location is: " + result.address.LongLabel).openPopup();
				setVariables(e.latitude, e.longitude, result.address.LongLabel);
			});
			

        });
//        .on('locationerror', function(e){
//             console.log(e);
//             alert("Location access denied.");
//         });
		
	function setVariables(latIn, LonIn, locaIn, street, city, state, zip){
		var lat = Math.round(latIn * 100000) / 100000;
		var lon = Math.round(LonIn * 100000) / 100000;
		
		var addressArray = locaIn.split(",");
		street  = addressArray[0];
		city = addressArray[1];
		state = addressArray[2];
		zip = addressArray[3];
			
		$scope.page.g_form.setValue("lat", lat);
		$scope.page.g_form.setValue("long", lon);
		$scope.page.g_form.setValue("location", locaIn);
		$scope.page.g_form.setValue("service_offering", c.data.svc_offering);
		$scope.page.g_form.setValue("latitude", lat);
		$scope.page.g_form.setValue("longitude", lon);
		$scope.page.g_form.setValue("street", street);
		$scope.page.g_form.setValue("city", city);
		$scope.page.g_form.setValue("state", state);
		$scope.page.g_form.setValue("zip", zip);
		
	}
}]]></client_script>
        <controller_as>c</controller_as>
        <css>#map {&#13;
  height: 100%;&#13;
  width: 100%;&#13;
  min-height: 350px;&#13;
  min-width: 300px;&#13;
  font-family: Arial, Helvetica, sans-serif;&#13;
  font-size: 14px;&#13;
  color: #323232;&#13;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id/>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {
  
}]]></link>
        <name>CalEPA Customer Map</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
  data.apiKey = "AAPK2e3ee315a3734a5180ca55188887c8afFSOV9KOMWalClEklVbaXUHeLZyM1W4Vn3qsHjS5AWCziaa9JycF_8rwe3Dxzkeag";

})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>onochie.ifedebe</sys_created_by>
        <sys_created_on>2023-02-28 19:38:54</sys_created_on>
        <sys_id>6796622587d9a9101d4f0fe4dabb3556</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>CalEPA Customer Map</sys_name>
        <sys_package display_value="CalEPA" source="x_acal_calepa">74c11f5d1bdda91037e8fc87cc4bcbbe</sys_package>
        <sys_policy/>
        <sys_scope display_value="CalEPA">74c11f5d1bdda91037e8fc87cc4bcbbe</sys_scope>
        <sys_update_name>sp_widget_6796622587d9a9101d4f0fe4dabb3556</sys_update_name>
        <sys_updated_by>onochie.ifedebe</sys_updated_by>
        <sys_updated_on>2023-02-28 19:38:54</sys_updated_on>
        <template><![CDATA[<div id="map"></div>]]></template>
    </sp_widget>
</record_update>
